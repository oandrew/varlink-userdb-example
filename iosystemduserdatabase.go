// Code generated by github.com/varlink/go/cmd/varlink-go-interface-generator, DO NOT EDIT.

package main

import (
	"context"
	"encoding/json"
	"github.com/varlink/go/varlink"
)

// Generated type declarations

type NoRecordFound struct{}

func (e NoRecordFound) Error() string {
	s := "io.systemd.UserDatabase.NoRecordFound"
	return s
}

type BadService struct{}

func (e BadService) Error() string {
	s := "io.systemd.UserDatabase.BadService"
	return s
}

type ServiceNotAvailable struct{}

func (e ServiceNotAvailable) Error() string {
	s := "io.systemd.UserDatabase.ServiceNotAvailable"
	return s
}

type ConflictingRecordFound struct{}

func (e ConflictingRecordFound) Error() string {
	s := "io.systemd.UserDatabase.ConflictingRecordFound"
	return s
}

type EnumerationNotSupported struct{}

func (e EnumerationNotSupported) Error() string {
	s := "io.systemd.UserDatabase.EnumerationNotSupported"
	return s
}

func Dispatch_Error(err error) error {
	if e, ok := err.(*varlink.Error); ok {
		switch e.Name {
		case "io.systemd.UserDatabase.NoRecordFound":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param NoRecordFound
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.systemd.UserDatabase.BadService":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param BadService
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.systemd.UserDatabase.ServiceNotAvailable":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param ServiceNotAvailable
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.systemd.UserDatabase.ConflictingRecordFound":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param ConflictingRecordFound
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		case "io.systemd.UserDatabase.EnumerationNotSupported":
			errorRawParameters := e.Parameters.(*json.RawMessage)
			if errorRawParameters == nil {
				return e
			}
			var param EnumerationNotSupported
			err := json.Unmarshal(*errorRawParameters, &param)
			if err != nil {
				return e
			}
			return &param
		}
	}
	return err
}

// Generated client method calls

type GetUserRecord_methods struct{}

func GetUserRecord() GetUserRecord_methods { return GetUserRecord_methods{} }

func (m GetUserRecord_methods) Call(ctx context.Context, c *varlink.Connection, uid_in_ *int64, userName_in_ *string, service_in_ string) (record_out_ json.RawMessage, incomplete_out_ bool, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, uid_in_, userName_in_, service_in_)
	if err_ != nil {
		return
	}
	record_out_, incomplete_out_, _, err_ = receive(ctx)
	return
}

func (m GetUserRecord_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, uid_in_ *int64, userName_in_ *string, service_in_ string) (func(ctx context.Context) (json.RawMessage, bool, uint64, error), error) {
	var in struct {
		Uid      *int64  `json:"uid,omitempty"`
		UserName *string `json:"userName,omitempty"`
		Service  string  `json:"service"`
	}
	in.Uid = uid_in_
	in.UserName = userName_in_
	in.Service = service_in_
	receive, err := c.Send(ctx, "io.systemd.UserDatabase.GetUserRecord", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (record_out_ json.RawMessage, incomplete_out_ bool, flags uint64, err error) {
		var out struct {
			Record     json.RawMessage `json:"record"`
			Incomplete bool            `json:"incomplete"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		record_out_ = out.Record
		incomplete_out_ = out.Incomplete
		return
	}, nil
}

func (m GetUserRecord_methods) Upgrade(ctx context.Context, c *varlink.Connection, uid_in_ *int64, userName_in_ *string, service_in_ string) (func(ctx context.Context) (record_out_ json.RawMessage, incomplete_out_ bool, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		Uid      *int64  `json:"uid,omitempty"`
		UserName *string `json:"userName,omitempty"`
		Service  string  `json:"service"`
	}
	in.Uid = uid_in_
	in.UserName = userName_in_
	in.Service = service_in_
	receive, err := c.Upgrade(ctx, "io.systemd.UserDatabase.GetUserRecord", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (record_out_ json.RawMessage, incomplete_out_ bool, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			Record     json.RawMessage `json:"record"`
			Incomplete bool            `json:"incomplete"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		record_out_ = out.Record
		incomplete_out_ = out.Incomplete
		return
	}, nil
}

type GetGroupRecord_methods struct{}

func GetGroupRecord() GetGroupRecord_methods { return GetGroupRecord_methods{} }

func (m GetGroupRecord_methods) Call(ctx context.Context, c *varlink.Connection, gid_in_ *int64, groupName_in_ *string, service_in_ string) (record_out_ json.RawMessage, incomplete_out_ bool, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, gid_in_, groupName_in_, service_in_)
	if err_ != nil {
		return
	}
	record_out_, incomplete_out_, _, err_ = receive(ctx)
	return
}

func (m GetGroupRecord_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, gid_in_ *int64, groupName_in_ *string, service_in_ string) (func(ctx context.Context) (json.RawMessage, bool, uint64, error), error) {
	var in struct {
		Gid       *int64  `json:"gid,omitempty"`
		GroupName *string `json:"groupName,omitempty"`
		Service   string  `json:"service"`
	}
	in.Gid = gid_in_
	in.GroupName = groupName_in_
	in.Service = service_in_
	receive, err := c.Send(ctx, "io.systemd.UserDatabase.GetGroupRecord", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (record_out_ json.RawMessage, incomplete_out_ bool, flags uint64, err error) {
		var out struct {
			Record     json.RawMessage `json:"record"`
			Incomplete bool            `json:"incomplete"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		record_out_ = out.Record
		incomplete_out_ = out.Incomplete
		return
	}, nil
}

func (m GetGroupRecord_methods) Upgrade(ctx context.Context, c *varlink.Connection, gid_in_ *int64, groupName_in_ *string, service_in_ string) (func(ctx context.Context) (record_out_ json.RawMessage, incomplete_out_ bool, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		Gid       *int64  `json:"gid,omitempty"`
		GroupName *string `json:"groupName,omitempty"`
		Service   string  `json:"service"`
	}
	in.Gid = gid_in_
	in.GroupName = groupName_in_
	in.Service = service_in_
	receive, err := c.Upgrade(ctx, "io.systemd.UserDatabase.GetGroupRecord", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (record_out_ json.RawMessage, incomplete_out_ bool, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			Record     json.RawMessage `json:"record"`
			Incomplete bool            `json:"incomplete"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		record_out_ = out.Record
		incomplete_out_ = out.Incomplete
		return
	}, nil
}

type GetMemberships_methods struct{}

func GetMemberships() GetMemberships_methods { return GetMemberships_methods{} }

func (m GetMemberships_methods) Call(ctx context.Context, c *varlink.Connection, userName_in_ *string, groupName_in_ *string, service_in_ string) (userName_out_ string, groupName_out_ string, err_ error) {
	receive, err_ := m.Send(ctx, c, 0, userName_in_, groupName_in_, service_in_)
	if err_ != nil {
		return
	}
	userName_out_, groupName_out_, _, err_ = receive(ctx)
	return
}

func (m GetMemberships_methods) Send(ctx context.Context, c *varlink.Connection, flags uint64, userName_in_ *string, groupName_in_ *string, service_in_ string) (func(ctx context.Context) (string, string, uint64, error), error) {
	var in struct {
		UserName  *string `json:"userName,omitempty"`
		GroupName *string `json:"groupName,omitempty"`
		Service   string  `json:"service"`
	}
	in.UserName = userName_in_
	in.GroupName = groupName_in_
	in.Service = service_in_
	receive, err := c.Send(ctx, "io.systemd.UserDatabase.GetMemberships", in, flags)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (userName_out_ string, groupName_out_ string, flags uint64, err error) {
		var out struct {
			UserName  string `json:"userName"`
			GroupName string `json:"groupName"`
		}
		flags, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		userName_out_ = out.UserName
		groupName_out_ = out.GroupName
		return
	}, nil
}

func (m GetMemberships_methods) Upgrade(ctx context.Context, c *varlink.Connection, userName_in_ *string, groupName_in_ *string, service_in_ string) (func(ctx context.Context) (userName_out_ string, groupName_out_ string, flags uint64, conn varlink.ReadWriterContext, err_ error), error) {
	var in struct {
		UserName  *string `json:"userName,omitempty"`
		GroupName *string `json:"groupName,omitempty"`
		Service   string  `json:"service"`
	}
	in.UserName = userName_in_
	in.GroupName = groupName_in_
	in.Service = service_in_
	receive, err := c.Upgrade(ctx, "io.systemd.UserDatabase.GetMemberships", in)
	if err != nil {
		return nil, err
	}
	return func(context.Context) (userName_out_ string, groupName_out_ string, flags uint64, conn varlink.ReadWriterContext, err error) {
		var out struct {
			UserName  string `json:"userName"`
			GroupName string `json:"groupName"`
		}
		flags, conn, err = receive(ctx, &out)
		if err != nil {
			err = Dispatch_Error(err)
			return
		}
		userName_out_ = out.UserName
		groupName_out_ = out.GroupName
		return
	}, nil
}

// Generated service interface with all methods

type iosystemduserdatabaseInterface interface {
	GetUserRecord(ctx context.Context, c VarlinkCall, uid_ *int64, userName_ *string, service_ string) error
	GetGroupRecord(ctx context.Context, c VarlinkCall, gid_ *int64, groupName_ *string, service_ string) error
	GetMemberships(ctx context.Context, c VarlinkCall, userName_ *string, groupName_ *string, service_ string) error
}

// Generated service object with all methods

type VarlinkCall struct{ varlink.Call }

// Generated reply methods for all varlink errors

func (c *VarlinkCall) ReplyNoRecordFound(ctx context.Context) error {
	var out NoRecordFound
	return c.ReplyError(ctx, "io.systemd.UserDatabase.NoRecordFound", &out)
}

func (c *VarlinkCall) ReplyBadService(ctx context.Context) error {
	var out BadService
	return c.ReplyError(ctx, "io.systemd.UserDatabase.BadService", &out)
}

func (c *VarlinkCall) ReplyServiceNotAvailable(ctx context.Context) error {
	var out ServiceNotAvailable
	return c.ReplyError(ctx, "io.systemd.UserDatabase.ServiceNotAvailable", &out)
}

func (c *VarlinkCall) ReplyConflictingRecordFound(ctx context.Context) error {
	var out ConflictingRecordFound
	return c.ReplyError(ctx, "io.systemd.UserDatabase.ConflictingRecordFound", &out)
}

func (c *VarlinkCall) ReplyEnumerationNotSupported(ctx context.Context) error {
	var out EnumerationNotSupported
	return c.ReplyError(ctx, "io.systemd.UserDatabase.EnumerationNotSupported", &out)
}

// Generated reply methods for all varlink methods

func (c *VarlinkCall) ReplyGetUserRecord(ctx context.Context, record_ json.RawMessage, incomplete_ bool) error {
	var out struct {
		Record     json.RawMessage `json:"record"`
		Incomplete bool            `json:"incomplete"`
	}
	out.Record = record_
	out.Incomplete = incomplete_
	return c.Reply(ctx, &out)
}

func (c *VarlinkCall) ReplyGetGroupRecord(ctx context.Context, record_ json.RawMessage, incomplete_ bool) error {
	var out struct {
		Record     json.RawMessage `json:"record"`
		Incomplete bool            `json:"incomplete"`
	}
	out.Record = record_
	out.Incomplete = incomplete_
	return c.Reply(ctx, &out)
}

func (c *VarlinkCall) ReplyGetMemberships(ctx context.Context, userName_ string, groupName_ string) error {
	var out struct {
		UserName  string `json:"userName"`
		GroupName string `json:"groupName"`
	}
	out.UserName = userName_
	out.GroupName = groupName_
	return c.Reply(ctx, &out)
}

// Generated dummy implementations for all varlink methods

func (s *VarlinkInterface) GetUserRecord(ctx context.Context, c VarlinkCall, uid_ *int64, userName_ *string, service_ string) error {
	return c.ReplyMethodNotImplemented(ctx, "io.systemd.UserDatabase.GetUserRecord")
}

func (s *VarlinkInterface) GetGroupRecord(ctx context.Context, c VarlinkCall, gid_ *int64, groupName_ *string, service_ string) error {
	return c.ReplyMethodNotImplemented(ctx, "io.systemd.UserDatabase.GetGroupRecord")
}

func (s *VarlinkInterface) GetMemberships(ctx context.Context, c VarlinkCall, userName_ *string, groupName_ *string, service_ string) error {
	return c.ReplyMethodNotImplemented(ctx, "io.systemd.UserDatabase.GetMemberships")
}

// Generated method call dispatcher

func (s *VarlinkInterface) VarlinkDispatch(ctx context.Context, call varlink.Call, methodname string) error {
	switch methodname {
	case "GetUserRecord":
		var in struct {
			Uid      *int64  `json:"uid,omitempty"`
			UserName *string `json:"userName,omitempty"`
			Service  string  `json:"service"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.iosystemduserdatabaseInterface.GetUserRecord(ctx, VarlinkCall{call}, in.Uid, in.UserName, in.Service)

	case "GetGroupRecord":
		var in struct {
			Gid       *int64  `json:"gid,omitempty"`
			GroupName *string `json:"groupName,omitempty"`
			Service   string  `json:"service"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.iosystemduserdatabaseInterface.GetGroupRecord(ctx, VarlinkCall{call}, in.Gid, in.GroupName, in.Service)

	case "GetMemberships":
		var in struct {
			UserName  *string `json:"userName,omitempty"`
			GroupName *string `json:"groupName,omitempty"`
			Service   string  `json:"service"`
		}
		err := call.GetParameters(&in)
		if err != nil {
			return call.ReplyInvalidParameter(ctx, "parameters")
		}
		return s.iosystemduserdatabaseInterface.GetMemberships(ctx, VarlinkCall{call}, in.UserName, in.GroupName, in.Service)

	default:
		return call.ReplyMethodNotFound(ctx, methodname)
	}
}

// Generated varlink interface name

func (s *VarlinkInterface) VarlinkGetName() string {
	return `io.systemd.UserDatabase`
}

// Generated varlink interface description

func (s *VarlinkInterface) VarlinkGetDescription() string {
	return `interface io.systemd.UserDatabase


method GetUserRecord(
        uid : ?int,
        userName : ?string,
        service : string
) -> (
        record : object,
        incomplete : bool
)

method GetGroupRecord(
        gid : ?int,
        groupName : ?string,
        service : string
) -> (
        record : object,
        incomplete : bool
)

method GetMemberships(
        userName : ?string,
        groupName : ?string,
        service : string
) -> (
        userName : string,
        groupName : string
)

error NoRecordFound()
error BadService()
error ServiceNotAvailable()
error ConflictingRecordFound()
error EnumerationNotSupported()
`
}

// Generated service interface

type VarlinkInterface struct {
	iosystemduserdatabaseInterface
}

func VarlinkNew(m iosystemduserdatabaseInterface) *VarlinkInterface {
	return &VarlinkInterface{m}
}
